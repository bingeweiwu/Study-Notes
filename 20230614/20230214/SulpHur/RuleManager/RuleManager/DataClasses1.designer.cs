#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RuleManager
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SulpHur")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAssemblyInfo(AssemblyInfo instance);
    partial void UpdateAssemblyInfo(AssemblyInfo instance);
    partial void DeleteAssemblyInfo(AssemblyInfo instance);
    partial void InsertUITrace(UITrace instance);
    partial void UpdateUITrace(UITrace instance);
    partial void DeleteUITrace(UITrace instance);
    partial void InsertAssemblyLink(AssemblyLink instance);
    partial void UpdateAssemblyLink(AssemblyLink instance);
    partial void DeleteAssemblyLink(AssemblyLink instance);
    partial void InsertBugLink(BugLink instance);
    partial void UpdateBugLink(BugLink instance);
    partial void DeleteBugLink(BugLink instance);
    partial void InsertBuildInfo(BuildInfo instance);
    partial void UpdateBuildInfo(BuildInfo instance);
    partial void DeleteBuildInfo(BuildInfo instance);
    partial void InsertBuildType(BuildType instance);
    partial void UpdateBuildType(BuildType instance);
    partial void DeleteBuildType(BuildType instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertProviderDiffResult(ProviderDiffResult instance);
    partial void UpdateProviderDiffResult(ProviderDiffResult instance);
    partial void DeleteProviderDiffResult(ProviderDiffResult instance);
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    partial void InsertRule(Rule instance);
    partial void UpdateRule(Rule instance);
    partial void DeleteRule(Rule instance);
    partial void InsertRuleStatus(RuleStatus instance);
    partial void UpdateRuleStatus(RuleStatus instance);
    partial void DeleteRuleStatus(RuleStatus instance);
    partial void InsertUIContent(UIContent instance);
    partial void UpdateUIContent(UIContent instance);
    partial void DeleteUIContent(UIContent instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::RuleManager.Properties.Settings.Default.SulpHurConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AssemblyInfo> AssemblyInfos
		{
			get
			{
				return this.GetTable<AssemblyInfo>();
			}
		}
		
		public System.Data.Linq.Table<UITrace> UITraces
		{
			get
			{
				return this.GetTable<UITrace>();
			}
		}
		
		public System.Data.Linq.Table<AssemblyLink> AssemblyLinks
		{
			get
			{
				return this.GetTable<AssemblyLink>();
			}
		}
		
		public System.Data.Linq.Table<BugLink> BugLinks
		{
			get
			{
				return this.GetTable<BugLink>();
			}
		}
		
		public System.Data.Linq.Table<BuildInfo> BuildInfos
		{
			get
			{
				return this.GetTable<BuildInfo>();
			}
		}
		
		public System.Data.Linq.Table<BuildType> BuildTypes
		{
			get
			{
				return this.GetTable<BuildType>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<ProviderDiffResult> ProviderDiffResults
		{
			get
			{
				return this.GetTable<ProviderDiffResult>();
			}
		}
		
		public System.Data.Linq.Table<Result> Results
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
		
		public System.Data.Linq.Table<Rule> Rules
		{
			get
			{
				return this.GetTable<Rule>();
			}
		}
		
		public System.Data.Linq.Table<RuleStatus> RuleStatus
		{
			get
			{
				return this.GetTable<RuleStatus>();
			}
		}
		
		public System.Data.Linq.Table<UIContent> UIContents
		{
			get
			{
				return this.GetTable<UIContent>();
			}
		}
		
		public System.Data.Linq.Table<ResultsSummary> ResultsSummaries
		{
			get
			{
				return this.GetTable<ResultsSummary>();
			}
		}
		
		public System.Data.Linq.Table<ViewTypeBuild> ViewTypeBuilds
		{
			get
			{
				return this.GetTable<ViewTypeBuild>();
			}
		}
		
		public System.Data.Linq.Table<ViewAssemblySummary> ViewAssemblySummaries
		{
			get
			{
				return this.GetTable<ViewAssemblySummary>();
			}
		}
		
		public System.Data.Linq.Table<ViewRescan> ViewRescans
		{
			get
			{
				return this.GetTable<ViewRescan>();
			}
		}
		
		public System.Data.Linq.Table<ViewENUBitmap> ViewENUBitmaps
		{
			get
			{
				return this.GetTable<ViewENUBitmap>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssemblyInfo")]
	public partial class AssemblyInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _AssemblyName;
		
		private string _FullTypeName;
		
		private string _TypeName;
		
		private EntitySet<AssemblyLink> _AssemblyLinks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnAssemblyNameChanging(string value);
    partial void OnAssemblyNameChanged();
    partial void OnFullTypeNameChanging(string value);
    partial void OnFullTypeNameChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public AssemblyInfo()
		{
			this._AssemblyLinks = new EntitySet<AssemblyLink>(new Action<AssemblyLink>(this.attach_AssemblyLinks), new Action<AssemblyLink>(this.detach_AssemblyLinks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyName", DbType="VarChar(400) NOT NULL", CanBeNull=false)]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this.OnAssemblyNameChanging(value);
					this.SendPropertyChanging();
					this._AssemblyName = value;
					this.SendPropertyChanged("AssemblyName");
					this.OnAssemblyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullTypeName", DbType="VarChar(400) NOT NULL", CanBeNull=false)]
		public string FullTypeName
		{
			get
			{
				return this._FullTypeName;
			}
			set
			{
				if ((this._FullTypeName != value))
				{
					this.OnFullTypeNameChanging(value);
					this.SendPropertyChanging();
					this._FullTypeName = value;
					this.SendPropertyChanged("FullTypeName");
					this.OnFullTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssemblyInfo_AssemblyLink", Storage="_AssemblyLinks", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<AssemblyLink> AssemblyLinks
		{
			get
			{
				return this._AssemblyLinks;
			}
			set
			{
				this._AssemblyLinks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssemblyLinks(AssemblyLink entity)
		{
			this.SendPropertyChanging();
			entity.AssemblyInfo = this;
		}
		
		private void detach_AssemblyLinks(AssemblyLink entity)
		{
			this.SendPropertyChanging();
			entity.AssemblyInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UITrace")]
	public partial class UITrace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TraceID;
		
		private string _TraceName;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<int> _Reserve1;
		
		private string _Reserve2;
		
		private EntitySet<UIContent> _UIContents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTraceIDChanging(int value);
    partial void OnTraceIDChanged();
    partial void OnTraceNameChanging(string value);
    partial void OnTraceNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnReserve1Changing(System.Nullable<int> value);
    partial void OnReserve1Changed();
    partial void OnReserve2Changing(string value);
    partial void OnReserve2Changed();
    #endregion
		
		public UITrace()
		{
			this._UIContents = new EntitySet<UIContent>(new Action<UIContent>(this.attach_UIContents), new Action<UIContent>(this.detach_UIContents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TraceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TraceID
		{
			get
			{
				return this._TraceID;
			}
			set
			{
				if ((this._TraceID != value))
				{
					this.OnTraceIDChanging(value);
					this.SendPropertyChanging();
					this._TraceID = value;
					this.SendPropertyChanged("TraceID");
					this.OnTraceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TraceName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string TraceName
		{
			get
			{
				return this._TraceName;
			}
			set
			{
				if ((this._TraceName != value))
				{
					this.OnTraceNameChanging(value);
					this.SendPropertyChanging();
					this._TraceName = value;
					this.SendPropertyChanged("TraceName");
					this.OnTraceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reserve1", DbType="Int")]
		public System.Nullable<int> Reserve1
		{
			get
			{
				return this._Reserve1;
			}
			set
			{
				if ((this._Reserve1 != value))
				{
					this.OnReserve1Changing(value);
					this.SendPropertyChanging();
					this._Reserve1 = value;
					this.SendPropertyChanged("Reserve1");
					this.OnReserve1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reserve2", DbType="NVarChar(MAX)")]
		public string Reserve2
		{
			get
			{
				return this._Reserve2;
			}
			set
			{
				if ((this._Reserve2 != value))
				{
					this.OnReserve2Changing(value);
					this.SendPropertyChanging();
					this._Reserve2 = value;
					this.SendPropertyChanged("Reserve2");
					this.OnReserve2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UITrace_UIContent", Storage="_UIContents", ThisKey="TraceID", OtherKey="TraceID")]
		public EntitySet<UIContent> UIContents
		{
			get
			{
				return this._UIContents;
			}
			set
			{
				this._UIContents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UIContents(UIContent entity)
		{
			this.SendPropertyChanging();
			entity.UITrace = this;
		}
		
		private void detach_UIContents(UIContent entity)
		{
			this.SendPropertyChanging();
			entity.UITrace = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssemblyLink")]
	public partial class AssemblyLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssemblyLinkID;
		
		private int _ContentID;
		
		private int _TypeID;
		
		private bool _IsPageIdentifier;
		
		private System.Nullable<int> _Reserve1;
		
		private string _Reserve2;
		
		private EntityRef<AssemblyInfo> _AssemblyInfo;
		
		private EntityRef<UIContent> _UIContent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssemblyLinkIDChanging(int value);
    partial void OnAssemblyLinkIDChanged();
    partial void OnContentIDChanging(int value);
    partial void OnContentIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnIsPageIdentifierChanging(bool value);
    partial void OnIsPageIdentifierChanged();
    partial void OnReserve1Changing(System.Nullable<int> value);
    partial void OnReserve1Changed();
    partial void OnReserve2Changing(string value);
    partial void OnReserve2Changed();
    #endregion
		
		public AssemblyLink()
		{
			this._AssemblyInfo = default(EntityRef<AssemblyInfo>);
			this._UIContent = default(EntityRef<UIContent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyLinkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AssemblyLinkID
		{
			get
			{
				return this._AssemblyLinkID;
			}
			set
			{
				if ((this._AssemblyLinkID != value))
				{
					this.OnAssemblyLinkIDChanging(value);
					this.SendPropertyChanging();
					this._AssemblyLinkID = value;
					this.SendPropertyChanged("AssemblyLinkID");
					this.OnAssemblyLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentID", DbType="Int NOT NULL")]
		public int ContentID
		{
			get
			{
				return this._ContentID;
			}
			set
			{
				if ((this._ContentID != value))
				{
					if (this._UIContent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentIDChanging(value);
					this.SendPropertyChanging();
					this._ContentID = value;
					this.SendPropertyChanged("ContentID");
					this.OnContentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._AssemblyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPageIdentifier", DbType="Bit NOT NULL")]
		public bool IsPageIdentifier
		{
			get
			{
				return this._IsPageIdentifier;
			}
			set
			{
				if ((this._IsPageIdentifier != value))
				{
					this.OnIsPageIdentifierChanging(value);
					this.SendPropertyChanging();
					this._IsPageIdentifier = value;
					this.SendPropertyChanged("IsPageIdentifier");
					this.OnIsPageIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reserve1", DbType="Int")]
		public System.Nullable<int> Reserve1
		{
			get
			{
				return this._Reserve1;
			}
			set
			{
				if ((this._Reserve1 != value))
				{
					this.OnReserve1Changing(value);
					this.SendPropertyChanging();
					this._Reserve1 = value;
					this.SendPropertyChanged("Reserve1");
					this.OnReserve1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reserve2", DbType="NVarChar(MAX)")]
		public string Reserve2
		{
			get
			{
				return this._Reserve2;
			}
			set
			{
				if ((this._Reserve2 != value))
				{
					this.OnReserve2Changing(value);
					this.SendPropertyChanging();
					this._Reserve2 = value;
					this.SendPropertyChanged("Reserve2");
					this.OnReserve2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssemblyInfo_AssemblyLink", Storage="_AssemblyInfo", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public AssemblyInfo AssemblyInfo
		{
			get
			{
				return this._AssemblyInfo.Entity;
			}
			set
			{
				AssemblyInfo previousValue = this._AssemblyInfo.Entity;
				if (((previousValue != value) 
							|| (this._AssemblyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssemblyInfo.Entity = null;
						previousValue.AssemblyLinks.Remove(this);
					}
					this._AssemblyInfo.Entity = value;
					if ((value != null))
					{
						value.AssemblyLinks.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("AssemblyInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UIContent_AssemblyLink", Storage="_UIContent", ThisKey="ContentID", OtherKey="ContentID", IsForeignKey=true)]
		public UIContent UIContent
		{
			get
			{
				return this._UIContent.Entity;
			}
			set
			{
				UIContent previousValue = this._UIContent.Entity;
				if (((previousValue != value) 
							|| (this._UIContent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UIContent.Entity = null;
						previousValue.AssemblyLinks.Remove(this);
					}
					this._UIContent.Entity = value;
					if ((value != null))
					{
						value.AssemblyLinks.Add(this);
						this._ContentID = value.ContentID;
					}
					else
					{
						this._ContentID = default(int);
					}
					this.SendPropertyChanged("UIContent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BugLink")]
	public partial class BugLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BugLinkID;
		
		private int _ContentID;
		
		private int _BugID;
		
		private System.Nullable<System.Guid> _GUID;
		
		private EntityRef<UIContent> _UIContent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBugLinkIDChanging(int value);
    partial void OnBugLinkIDChanged();
    partial void OnContentIDChanging(int value);
    partial void OnContentIDChanged();
    partial void OnBugIDChanging(int value);
    partial void OnBugIDChanged();
    partial void OnGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnGUIDChanged();
    #endregion
		
		public BugLink()
		{
			this._UIContent = default(EntityRef<UIContent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BugLinkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BugLinkID
		{
			get
			{
				return this._BugLinkID;
			}
			set
			{
				if ((this._BugLinkID != value))
				{
					this.OnBugLinkIDChanging(value);
					this.SendPropertyChanging();
					this._BugLinkID = value;
					this.SendPropertyChanged("BugLinkID");
					this.OnBugLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentID", DbType="Int NOT NULL")]
		public int ContentID
		{
			get
			{
				return this._ContentID;
			}
			set
			{
				if ((this._ContentID != value))
				{
					if (this._UIContent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentIDChanging(value);
					this.SendPropertyChanging();
					this._ContentID = value;
					this.SendPropertyChanged("ContentID");
					this.OnContentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BugID", DbType="Int NOT NULL")]
		public int BugID
		{
			get
			{
				return this._BugID;
			}
			set
			{
				if ((this._BugID != value))
				{
					this.OnBugIDChanging(value);
					this.SendPropertyChanging();
					this._BugID = value;
					this.SendPropertyChanged("BugID");
					this.OnBugIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UIContent_BugLink", Storage="_UIContent", ThisKey="ContentID", OtherKey="ContentID", IsForeignKey=true)]
		public UIContent UIContent
		{
			get
			{
				return this._UIContent.Entity;
			}
			set
			{
				UIContent previousValue = this._UIContent.Entity;
				if (((previousValue != value) 
							|| (this._UIContent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UIContent.Entity = null;
						previousValue.BugLinks.Remove(this);
					}
					this._UIContent.Entity = value;
					if ((value != null))
					{
						value.BugLinks.Add(this);
						this._ContentID = value.ContentID;
					}
					else
					{
						this._ContentID = default(int);
					}
					this.SendPropertyChanged("UIContent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BuildInfo")]
	public partial class BuildInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BuildID;
		
		private string _BuildNo;
		
		private string _Language;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<UIContent> _UIContents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBuildIDChanging(int value);
    partial void OnBuildIDChanged();
    partial void OnBuildNoChanging(string value);
    partial void OnBuildNoChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public BuildInfo()
		{
			this._UIContents = new EntitySet<UIContent>(new Action<UIContent>(this.attach_UIContents), new Action<UIContent>(this.detach_UIContents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BuildID
		{
			get
			{
				return this._BuildID;
			}
			set
			{
				if ((this._BuildID != value))
				{
					this.OnBuildIDChanging(value);
					this.SendPropertyChanging();
					this._BuildID = value;
					this.SendPropertyChanged("BuildID");
					this.OnBuildIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildNo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BuildNo
		{
			get
			{
				return this._BuildNo;
			}
			set
			{
				if ((this._BuildNo != value))
				{
					this.OnBuildNoChanging(value);
					this.SendPropertyChanging();
					this._BuildNo = value;
					this.SendPropertyChanged("BuildNo");
					this.OnBuildNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(50)")]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BuildInfo_UIContent", Storage="_UIContents", ThisKey="BuildID", OtherKey="BuildID")]
		public EntitySet<UIContent> UIContents
		{
			get
			{
				return this._UIContents;
			}
			set
			{
				this._UIContents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UIContents(UIContent entity)
		{
			this.SendPropertyChanging();
			entity.BuildInfo = this;
		}
		
		private void detach_UIContents(UIContent entity)
		{
			this.SendPropertyChanging();
			entity.BuildInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BuildTypes")]
	public partial class BuildType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordID;
		
		private string _AssemblyName;
		
		private string _TypeName;
		
		private string _BuildNo;
		
		private string _Mark;
		
		private string _LanuchSteps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIDChanging(int value);
    partial void OnRecordIDChanged();
    partial void OnAssemblyNameChanging(string value);
    partial void OnAssemblyNameChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnBuildNoChanging(string value);
    partial void OnBuildNoChanged();
    partial void OnMarkChanging(string value);
    partial void OnMarkChanged();
    partial void OnLanuchStepsChanging(string value);
    partial void OnLanuchStepsChanged();
    #endregion
		
		public BuildType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this.OnAssemblyNameChanging(value);
					this.SendPropertyChanging();
					this._AssemblyName = value;
					this.SendPropertyChanged("AssemblyName");
					this.OnAssemblyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BuildNo
		{
			get
			{
				return this._BuildNo;
			}
			set
			{
				if ((this._BuildNo != value))
				{
					this.OnBuildNoChanging(value);
					this.SendPropertyChanging();
					this._BuildNo = value;
					this.SendPropertyChanged("BuildNo");
					this.OnBuildNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanuchSteps", DbType="NVarChar(MAX)")]
		public string LanuchSteps
		{
			get
			{
				return this._LanuchSteps;
			}
			set
			{
				if ((this._LanuchSteps != value))
				{
					this.OnLanuchStepsChanging(value);
					this.SendPropertyChanging();
					this._LanuchSteps = value;
					this.SendPropertyChanged("LanuchSteps");
					this.OnLanuchStepsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientID;
		
		private string _UserName;
		
		private string _MachineName;
		
		private string _IPAddress;
		
		private string _OSLanguage;
		
		private string _OSType;
		
		private string _MacAddress;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<UIContent> _UIContents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnOSLanguageChanging(string value);
    partial void OnOSLanguageChanged();
    partial void OnOSTypeChanging(string value);
    partial void OnOSTypeChanged();
    partial void OnMacAddressChanging(string value);
    partial void OnMacAddressChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Client()
		{
			this._UIContents = new EntitySet<UIContent>(new Action<UIContent>(this.attach_UIContents), new Action<UIContent>(this.detach_UIContents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineName", DbType="VarChar(30)")]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress", DbType="VarChar(30)")]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSLanguage", DbType="NVarChar(100)")]
		public string OSLanguage
		{
			get
			{
				return this._OSLanguage;
			}
			set
			{
				if ((this._OSLanguage != value))
				{
					this.OnOSLanguageChanging(value);
					this.SendPropertyChanging();
					this._OSLanguage = value;
					this.SendPropertyChanged("OSLanguage");
					this.OnOSLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSType", DbType="VarChar(30)")]
		public string OSType
		{
			get
			{
				return this._OSType;
			}
			set
			{
				if ((this._OSType != value))
				{
					this.OnOSTypeChanging(value);
					this.SendPropertyChanging();
					this._OSType = value;
					this.SendPropertyChanged("OSType");
					this.OnOSTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MacAddress", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string MacAddress
		{
			get
			{
				return this._MacAddress;
			}
			set
			{
				if ((this._MacAddress != value))
				{
					this.OnMacAddressChanging(value);
					this.SendPropertyChanging();
					this._MacAddress = value;
					this.SendPropertyChanged("MacAddress");
					this.OnMacAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_UIContent", Storage="_UIContents", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<UIContent> UIContents
		{
			get
			{
				return this._UIContents;
			}
			set
			{
				this._UIContents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UIContents(UIContent entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_UIContents(UIContent entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProviderDiffResults")]
	public partial class ProviderDiffResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResultID;
		
		private string _DiffType;
		
		private string _WmiClassName;
		
		private string _WmiClassBody;
		
		private string _SourceFileName;
		
		private System.Nullable<int> _ContentIDPre;
		
		private System.Nullable<int> _ContentIDPost;
		
		private string _AssemblyName;
		
		private System.Nullable<bool> _HasImage;
		
		private string _PageName;
		
		private string _ComparedBuild;
		
		private string _OldClass;
		
		private string _NewClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResultIDChanging(int value);
    partial void OnResultIDChanged();
    partial void OnDiffTypeChanging(string value);
    partial void OnDiffTypeChanged();
    partial void OnWmiClassNameChanging(string value);
    partial void OnWmiClassNameChanged();
    partial void OnWmiClassBodyChanging(string value);
    partial void OnWmiClassBodyChanged();
    partial void OnSourceFileNameChanging(string value);
    partial void OnSourceFileNameChanged();
    partial void OnContentIDPreChanging(System.Nullable<int> value);
    partial void OnContentIDPreChanged();
    partial void OnContentIDPostChanging(System.Nullable<int> value);
    partial void OnContentIDPostChanged();
    partial void OnAssemblyNameChanging(string value);
    partial void OnAssemblyNameChanged();
    partial void OnHasImageChanging(System.Nullable<bool> value);
    partial void OnHasImageChanged();
    partial void OnPageNameChanging(string value);
    partial void OnPageNameChanged();
    partial void OnComparedBuildChanging(string value);
    partial void OnComparedBuildChanged();
    partial void OnOldClassChanging(string value);
    partial void OnOldClassChanged();
    partial void OnNewClassChanging(string value);
    partial void OnNewClassChanged();
    #endregion
		
		public ProviderDiffResult()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResultID
		{
			get
			{
				return this._ResultID;
			}
			set
			{
				if ((this._ResultID != value))
				{
					this.OnResultIDChanging(value);
					this.SendPropertyChanging();
					this._ResultID = value;
					this.SendPropertyChanged("ResultID");
					this.OnResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiffType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DiffType
		{
			get
			{
				return this._DiffType;
			}
			set
			{
				if ((this._DiffType != value))
				{
					this.OnDiffTypeChanging(value);
					this.SendPropertyChanging();
					this._DiffType = value;
					this.SendPropertyChanged("DiffType");
					this.OnDiffTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WmiClassName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string WmiClassName
		{
			get
			{
				return this._WmiClassName;
			}
			set
			{
				if ((this._WmiClassName != value))
				{
					this.OnWmiClassNameChanging(value);
					this.SendPropertyChanging();
					this._WmiClassName = value;
					this.SendPropertyChanged("WmiClassName");
					this.OnWmiClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WmiClassBody", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string WmiClassBody
		{
			get
			{
				return this._WmiClassBody;
			}
			set
			{
				if ((this._WmiClassBody != value))
				{
					this.OnWmiClassBodyChanging(value);
					this.SendPropertyChanging();
					this._WmiClassBody = value;
					this.SendPropertyChanged("WmiClassBody");
					this.OnWmiClassBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceFileName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string SourceFileName
		{
			get
			{
				return this._SourceFileName;
			}
			set
			{
				if ((this._SourceFileName != value))
				{
					this.OnSourceFileNameChanging(value);
					this.SendPropertyChanging();
					this._SourceFileName = value;
					this.SendPropertyChanged("SourceFileName");
					this.OnSourceFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentIDPre", DbType="Int")]
		public System.Nullable<int> ContentIDPre
		{
			get
			{
				return this._ContentIDPre;
			}
			set
			{
				if ((this._ContentIDPre != value))
				{
					this.OnContentIDPreChanging(value);
					this.SendPropertyChanging();
					this._ContentIDPre = value;
					this.SendPropertyChanged("ContentIDPre");
					this.OnContentIDPreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentIDPost", DbType="Int")]
		public System.Nullable<int> ContentIDPost
		{
			get
			{
				return this._ContentIDPost;
			}
			set
			{
				if ((this._ContentIDPost != value))
				{
					this.OnContentIDPostChanging(value);
					this.SendPropertyChanging();
					this._ContentIDPost = value;
					this.SendPropertyChanged("ContentIDPost");
					this.OnContentIDPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this.OnAssemblyNameChanging(value);
					this.SendPropertyChanging();
					this._AssemblyName = value;
					this.SendPropertyChanged("AssemblyName");
					this.OnAssemblyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasImage", DbType="Bit")]
		public System.Nullable<bool> HasImage
		{
			get
			{
				return this._HasImage;
			}
			set
			{
				if ((this._HasImage != value))
				{
					this.OnHasImageChanging(value);
					this.SendPropertyChanging();
					this._HasImage = value;
					this.SendPropertyChanged("HasImage");
					this.OnHasImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageName", DbType="NVarChar(500)")]
		public string PageName
		{
			get
			{
				return this._PageName;
			}
			set
			{
				if ((this._PageName != value))
				{
					this.OnPageNameChanging(value);
					this.SendPropertyChanging();
					this._PageName = value;
					this.SendPropertyChanged("PageName");
					this.OnPageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComparedBuild", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string ComparedBuild
		{
			get
			{
				return this._ComparedBuild;
			}
			set
			{
				if ((this._ComparedBuild != value))
				{
					this.OnComparedBuildChanging(value);
					this.SendPropertyChanging();
					this._ComparedBuild = value;
					this.SendPropertyChanged("ComparedBuild");
					this.OnComparedBuildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldClass", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string OldClass
		{
			get
			{
				return this._OldClass;
			}
			set
			{
				if ((this._OldClass != value))
				{
					this.OnOldClassChanging(value);
					this.SendPropertyChanging();
					this._OldClass = value;
					this.SendPropertyChanged("OldClass");
					this.OnOldClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewClass", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string NewClass
		{
			get
			{
				return this._NewClass;
			}
			set
			{
				if ((this._NewClass != value))
				{
					this.OnNewClassChanging(value);
					this.SendPropertyChanging();
					this._NewClass = value;
					this.SendPropertyChanged("NewClass");
					this.OnNewClassChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Results")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResultID;
		
		private int _ContentID;
		
		private System.Xml.Linq.XElement _RelatedControls;
		
		private int _RuleID;
		
		private string _ResultType;
		
		private System.Data.Linq.Binary _ResultImage;
		
		private string _ResultLog;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<Rule> _Rule;
		
		private EntityRef<UIContent> _UIContent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResultIDChanging(int value);
    partial void OnResultIDChanged();
    partial void OnContentIDChanging(int value);
    partial void OnContentIDChanged();
    partial void OnRelatedControlsChanging(System.Xml.Linq.XElement value);
    partial void OnRelatedControlsChanged();
    partial void OnRuleIDChanging(int value);
    partial void OnRuleIDChanged();
    partial void OnResultTypeChanging(string value);
    partial void OnResultTypeChanged();
    partial void OnResultImageChanging(System.Data.Linq.Binary value);
    partial void OnResultImageChanged();
    partial void OnResultLogChanging(string value);
    partial void OnResultLogChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Result()
		{
			this._Rule = default(EntityRef<Rule>);
			this._UIContent = default(EntityRef<UIContent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResultID
		{
			get
			{
				return this._ResultID;
			}
			set
			{
				if ((this._ResultID != value))
				{
					this.OnResultIDChanging(value);
					this.SendPropertyChanging();
					this._ResultID = value;
					this.SendPropertyChanged("ResultID");
					this.OnResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentID", DbType="Int NOT NULL")]
		public int ContentID
		{
			get
			{
				return this._ContentID;
			}
			set
			{
				if ((this._ContentID != value))
				{
					if (this._UIContent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentIDChanging(value);
					this.SendPropertyChanging();
					this._ContentID = value;
					this.SendPropertyChanged("ContentID");
					this.OnContentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatedControls", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement RelatedControls
		{
			get
			{
				return this._RelatedControls;
			}
			set
			{
				if ((this._RelatedControls != value))
				{
					this.OnRelatedControlsChanging(value);
					this.SendPropertyChanging();
					this._RelatedControls = value;
					this.SendPropertyChanged("RelatedControls");
					this.OnRelatedControlsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleID", DbType="Int NOT NULL")]
		public int RuleID
		{
			get
			{
				return this._RuleID;
			}
			set
			{
				if ((this._RuleID != value))
				{
					if (this._Rule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIDChanging(value);
					this.SendPropertyChanging();
					this._RuleID = value;
					this.SendPropertyChanged("RuleID");
					this.OnRuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultType", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ResultType
		{
			get
			{
				return this._ResultType;
			}
			set
			{
				if ((this._ResultType != value))
				{
					this.OnResultTypeChanging(value);
					this.SendPropertyChanging();
					this._ResultType = value;
					this.SendPropertyChanged("ResultType");
					this.OnResultTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultImage", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ResultImage
		{
			get
			{
				return this._ResultImage;
			}
			set
			{
				if ((this._ResultImage != value))
				{
					this.OnResultImageChanging(value);
					this.SendPropertyChanging();
					this._ResultImage = value;
					this.SendPropertyChanged("ResultImage");
					this.OnResultImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultLog", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ResultLog
		{
			get
			{
				return this._ResultLog;
			}
			set
			{
				if ((this._ResultLog != value))
				{
					this.OnResultLogChanging(value);
					this.SendPropertyChanging();
					this._ResultLog = value;
					this.SendPropertyChanged("ResultLog");
					this.OnResultLogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_Result", Storage="_Rule", ThisKey="RuleID", OtherKey="RuleID", IsForeignKey=true)]
		public Rule Rule
		{
			get
			{
				return this._Rule.Entity;
			}
			set
			{
				Rule previousValue = this._Rule.Entity;
				if (((previousValue != value) 
							|| (this._Rule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rule.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Rule.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._RuleID = value.RuleID;
					}
					else
					{
						this._RuleID = default(int);
					}
					this.SendPropertyChanged("Rule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UIContent_Result", Storage="_UIContent", ThisKey="ContentID", OtherKey="ContentID", IsForeignKey=true)]
		public UIContent UIContent
		{
			get
			{
				return this._UIContent.Entity;
			}
			set
			{
				UIContent previousValue = this._UIContent.Entity;
				if (((previousValue != value) 
							|| (this._UIContent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UIContent.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._UIContent.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._ContentID = value.ContentID;
					}
					else
					{
						this._ContentID = default(int);
					}
					this.SendPropertyChanged("UIContent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rules")]
	public partial class Rule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RuleID;
		
		private string _RuleName;
		
		private string _RulePath;
		
		private string _RuleDesc;
		
		private bool _IsEnabled;
		
		private string _AssemblyInfo;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<Result> _Results;
		
		private EntitySet<RuleStatus> _RuleStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRuleIDChanging(int value);
    partial void OnRuleIDChanged();
    partial void OnRuleNameChanging(string value);
    partial void OnRuleNameChanged();
    partial void OnRulePathChanging(string value);
    partial void OnRulePathChanged();
    partial void OnRuleDescChanging(string value);
    partial void OnRuleDescChanged();
    partial void OnIsEnabledChanging(bool value);
    partial void OnIsEnabledChanged();
    partial void OnAssemblyInfoChanging(string value);
    partial void OnAssemblyInfoChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Rule()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._RuleStatus = new EntitySet<RuleStatus>(new Action<RuleStatus>(this.attach_RuleStatus), new Action<RuleStatus>(this.detach_RuleStatus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RuleID
		{
			get
			{
				return this._RuleID;
			}
			set
			{
				if ((this._RuleID != value))
				{
					this.OnRuleIDChanging(value);
					this.SendPropertyChanging();
					this._RuleID = value;
					this.SendPropertyChanged("RuleID");
					this.OnRuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RuleName
		{
			get
			{
				return this._RuleName;
			}
			set
			{
				if ((this._RuleName != value))
				{
					this.OnRuleNameChanging(value);
					this.SendPropertyChanging();
					this._RuleName = value;
					this.SendPropertyChanged("RuleName");
					this.OnRuleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RulePath", DbType="VarChar(50)")]
		public string RulePath
		{
			get
			{
				return this._RulePath;
			}
			set
			{
				if ((this._RulePath != value))
				{
					this.OnRulePathChanging(value);
					this.SendPropertyChanging();
					this._RulePath = value;
					this.SendPropertyChanged("RulePath");
					this.OnRulePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleDesc", DbType="NVarChar(100)")]
		public string RuleDesc
		{
			get
			{
				return this._RuleDesc;
			}
			set
			{
				if ((this._RuleDesc != value))
				{
					this.OnRuleDescChanging(value);
					this.SendPropertyChanging();
					this._RuleDesc = value;
					this.SendPropertyChanged("RuleDesc");
					this.OnRuleDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabled", DbType="Bit NOT NULL")]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyInfo", DbType="VarChar(50)")]
		public string AssemblyInfo
		{
			get
			{
				return this._AssemblyInfo;
			}
			set
			{
				if ((this._AssemblyInfo != value))
				{
					this.OnAssemblyInfoChanging(value);
					this.SendPropertyChanging();
					this._AssemblyInfo = value;
					this.SendPropertyChanged("AssemblyInfo");
					this.OnAssemblyInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_Result", Storage="_Results", ThisKey="RuleID", OtherKey="RuleID")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_RuleStatus", Storage="_RuleStatus", ThisKey="RuleID", OtherKey="RuleID")]
		public EntitySet<RuleStatus> RuleStatus
		{
			get
			{
				return this._RuleStatus;
			}
			set
			{
				this._RuleStatus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Rule = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Rule = null;
		}
		
		private void attach_RuleStatus(RuleStatus entity)
		{
			this.SendPropertyChanging();
			entity.Rule = this;
		}
		
		private void detach_RuleStatus(RuleStatus entity)
		{
			this.SendPropertyChanging();
			entity.Rule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RuleStatus")]
	public partial class RuleStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContentID;
		
		private int _RuleID;
		
		private System.Nullable<bool> _RuleStatus1;
		
		private bool _IsChecked;
		
		private System.DateTime _DateUpdated;
		
		private EntityRef<Rule> _Rule;
		
		private EntityRef<UIContent> _UIContent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContentIDChanging(int value);
    partial void OnContentIDChanged();
    partial void OnRuleIDChanging(int value);
    partial void OnRuleIDChanged();
    partial void OnRuleStatus1Changing(System.Nullable<bool> value);
    partial void OnRuleStatus1Changed();
    partial void OnIsCheckedChanging(bool value);
    partial void OnIsCheckedChanged();
    partial void OnDateUpdatedChanging(System.DateTime value);
    partial void OnDateUpdatedChanged();
    #endregion
		
		public RuleStatus()
		{
			this._Rule = default(EntityRef<Rule>);
			this._UIContent = default(EntityRef<UIContent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContentID
		{
			get
			{
				return this._ContentID;
			}
			set
			{
				if ((this._ContentID != value))
				{
					if (this._UIContent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentIDChanging(value);
					this.SendPropertyChanging();
					this._ContentID = value;
					this.SendPropertyChanged("ContentID");
					this.OnContentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RuleID
		{
			get
			{
				return this._RuleID;
			}
			set
			{
				if ((this._RuleID != value))
				{
					if (this._Rule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIDChanging(value);
					this.SendPropertyChanging();
					this._RuleID = value;
					this.SendPropertyChanged("RuleID");
					this.OnRuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RuleStatus", Storage="_RuleStatus1", DbType="Bit")]
		public System.Nullable<bool> RuleStatus1
		{
			get
			{
				return this._RuleStatus1;
			}
			set
			{
				if ((this._RuleStatus1 != value))
				{
					this.OnRuleStatus1Changing(value);
					this.SendPropertyChanging();
					this._RuleStatus1 = value;
					this.SendPropertyChanged("RuleStatus1");
					this.OnRuleStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsChecked", DbType="Bit NOT NULL")]
		public bool IsChecked
		{
			get
			{
				return this._IsChecked;
			}
			set
			{
				if ((this._IsChecked != value))
				{
					this.OnIsCheckedChanging(value);
					this.SendPropertyChanging();
					this._IsChecked = value;
					this.SendPropertyChanged("IsChecked");
					this.OnIsCheckedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this.OnDateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateUpdated = value;
					this.SendPropertyChanged("DateUpdated");
					this.OnDateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_RuleStatus", Storage="_Rule", ThisKey="RuleID", OtherKey="RuleID", IsForeignKey=true)]
		public Rule Rule
		{
			get
			{
				return this._Rule.Entity;
			}
			set
			{
				Rule previousValue = this._Rule.Entity;
				if (((previousValue != value) 
							|| (this._Rule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rule.Entity = null;
						previousValue.RuleStatus.Remove(this);
					}
					this._Rule.Entity = value;
					if ((value != null))
					{
						value.RuleStatus.Add(this);
						this._RuleID = value.RuleID;
					}
					else
					{
						this._RuleID = default(int);
					}
					this.SendPropertyChanged("Rule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UIContent_RuleStatus", Storage="_UIContent", ThisKey="ContentID", OtherKey="ContentID", IsForeignKey=true)]
		public UIContent UIContent
		{
			get
			{
				return this._UIContent.Entity;
			}
			set
			{
				UIContent previousValue = this._UIContent.Entity;
				if (((previousValue != value) 
							|| (this._UIContent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UIContent.Entity = null;
						previousValue.RuleStatus.Remove(this);
					}
					this._UIContent.Entity = value;
					if ((value != null))
					{
						value.RuleStatus.Add(this);
						this._ContentID = value.ContentID;
					}
					else
					{
						this._ContentID = default(int);
					}
					this.SendPropertyChanged("UIContent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UIContents")]
	public partial class UIContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContentID;
		
		private System.Nullable<System.Guid> _GUID;
		
		private int _ClientID;
		
		private int _BuildID;
		
		private string _UIName;
		
		private System.Xml.Linq.XElement _UIContent1;
		
		private System.Data.Linq.Binary _UIScreenShot;
		
		private bool _IsWebUI;
		
		private System.DateTime _DateUploaded;
		
		private System.Nullable<int> _TraceID;
		
		private System.Nullable<int> _Reserve1;
		
		private string _Reserve2;
		
		private string _Reserve3;
		
		private string _Reserve4;
		
		private string _Reserve5;
		
		private string _LaunchedFrom;
		
		private string _WindowHierarchy;
		
		private EntitySet<AssemblyLink> _AssemblyLinks;
		
		private EntitySet<BugLink> _BugLinks;
		
		private EntitySet<Result> _Results;
		
		private EntitySet<RuleStatus> _RuleStatus;
		
		private EntityRef<BuildInfo> _BuildInfo;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<UITrace> _UITrace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContentIDChanging(int value);
    partial void OnContentIDChanged();
    partial void OnGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnGUIDChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnBuildIDChanging(int value);
    partial void OnBuildIDChanged();
    partial void OnUINameChanging(string value);
    partial void OnUINameChanged();
    partial void OnUIContent1Changing(System.Xml.Linq.XElement value);
    partial void OnUIContent1Changed();
    partial void OnUIScreenShotChanging(System.Data.Linq.Binary value);
    partial void OnUIScreenShotChanged();
    partial void OnIsWebUIChanging(bool value);
    partial void OnIsWebUIChanged();
    partial void OnDateUploadedChanging(System.DateTime value);
    partial void OnDateUploadedChanged();
    partial void OnTraceIDChanging(System.Nullable<int> value);
    partial void OnTraceIDChanged();
    partial void OnReserve1Changing(System.Nullable<int> value);
    partial void OnReserve1Changed();
    partial void OnReserve2Changing(string value);
    partial void OnReserve2Changed();
    partial void OnReserve3Changing(string value);
    partial void OnReserve3Changed();
    partial void OnReserve4Changing(string value);
    partial void OnReserve4Changed();
    partial void OnReserve5Changing(string value);
    partial void OnReserve5Changed();
    partial void OnLaunchedFromChanging(string value);
    partial void OnLaunchedFromChanged();
    partial void OnWindowHierarchyChanging(string value);
    partial void OnWindowHierarchyChanged();
    #endregion
		
		public UIContent()
		{
			this._AssemblyLinks = new EntitySet<AssemblyLink>(new Action<AssemblyLink>(this.attach_AssemblyLinks), new Action<AssemblyLink>(this.detach_AssemblyLinks));
			this._BugLinks = new EntitySet<BugLink>(new Action<BugLink>(this.attach_BugLinks), new Action<BugLink>(this.detach_BugLinks));
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._RuleStatus = new EntitySet<RuleStatus>(new Action<RuleStatus>(this.attach_RuleStatus), new Action<RuleStatus>(this.detach_RuleStatus));
			this._BuildInfo = default(EntityRef<BuildInfo>);
			this._Client = default(EntityRef<Client>);
			this._UITrace = default(EntityRef<UITrace>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContentID
		{
			get
			{
				return this._ContentID;
			}
			set
			{
				if ((this._ContentID != value))
				{
					this.OnContentIDChanging(value);
					this.SendPropertyChanging();
					this._ContentID = value;
					this.SendPropertyChanged("ContentID");
					this.OnContentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildID", DbType="Int NOT NULL")]
		public int BuildID
		{
			get
			{
				return this._BuildID;
			}
			set
			{
				if ((this._BuildID != value))
				{
					if (this._BuildInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuildIDChanging(value);
					this.SendPropertyChanging();
					this._BuildID = value;
					this.SendPropertyChanged("BuildID");
					this.OnBuildIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UIName", DbType="NVarChar(200)")]
		public string UIName
		{
			get
			{
				return this._UIName;
			}
			set
			{
				if ((this._UIName != value))
				{
					this.OnUINameChanging(value);
					this.SendPropertyChanging();
					this._UIName = value;
					this.SendPropertyChanged("UIName");
					this.OnUINameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="UIContent", Storage="_UIContent1", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement UIContent1
		{
			get
			{
				return this._UIContent1;
			}
			set
			{
				if ((this._UIContent1 != value))
				{
					this.OnUIContent1Changing(value);
					this.SendPropertyChanging();
					this._UIContent1 = value;
					this.SendPropertyChanged("UIContent1");
					this.OnUIContent1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UIScreenShot", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary UIScreenShot
		{
			get
			{
				return this._UIScreenShot;
			}
			set
			{
				if ((this._UIScreenShot != value))
				{
					this.OnUIScreenShotChanging(value);
					this.SendPropertyChanging();
					this._UIScreenShot = value;
					this.SendPropertyChanged("UIScreenShot");
					this.OnUIScreenShotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWebUI", DbType="Bit NOT NULL")]
		public bool IsWebUI
		{
			get
			{
				return this._IsWebUI;
			}
			set
			{
				if ((this._IsWebUI != value))
				{
					this.OnIsWebUIChanging(value);
					this.SendPropertyChanging();
					this._IsWebUI = value;
					this.SendPropertyChanged("IsWebUI");
					this.OnIsWebUIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUploaded", DbType="DateTime NOT NULL")]
		public System.DateTime DateUploaded
		{
			get
			{
				return this._DateUploaded;
			}
			set
			{
				if ((this._DateUploaded != value))
				{
					this.OnDateUploadedChanging(value);
					this.SendPropertyChanging();
					this._DateUploaded = value;
					this.SendPropertyChanged("DateUploaded");
					this.OnDateUploadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TraceID", DbType="Int")]
		public System.Nullable<int> TraceID
		{
			get
			{
				return this._TraceID;
			}
			set
			{
				if ((this._TraceID != value))
				{
					if (this._UITrace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTraceIDChanging(value);
					this.SendPropertyChanging();
					this._TraceID = value;
					this.SendPropertyChanged("TraceID");
					this.OnTraceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reserve1", DbType="Int")]
		public System.Nullable<int> Reserve1
		{
			get
			{
				return this._Reserve1;
			}
			set
			{
				if ((this._Reserve1 != value))
				{
					this.OnReserve1Changing(value);
					this.SendPropertyChanging();
					this._Reserve1 = value;
					this.SendPropertyChanged("Reserve1");
					this.OnReserve1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reserve2", DbType="NVarChar(MAX)")]
		public string Reserve2
		{
			get
			{
				return this._Reserve2;
			}
			set
			{
				if ((this._Reserve2 != value))
				{
					this.OnReserve2Changing(value);
					this.SendPropertyChanging();
					this._Reserve2 = value;
					this.SendPropertyChanged("Reserve2");
					this.OnReserve2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reserve3", DbType="NVarChar(MAX)")]
		public string Reserve3
		{
			get
			{
				return this._Reserve3;
			}
			set
			{
				if ((this._Reserve3 != value))
				{
					this.OnReserve3Changing(value);
					this.SendPropertyChanging();
					this._Reserve3 = value;
					this.SendPropertyChanged("Reserve3");
					this.OnReserve3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reserve4", DbType="NVarChar(MAX)")]
		public string Reserve4
		{
			get
			{
				return this._Reserve4;
			}
			set
			{
				if ((this._Reserve4 != value))
				{
					this.OnReserve4Changing(value);
					this.SendPropertyChanging();
					this._Reserve4 = value;
					this.SendPropertyChanged("Reserve4");
					this.OnReserve4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reserve5", DbType="NVarChar(MAX)")]
		public string Reserve5
		{
			get
			{
				return this._Reserve5;
			}
			set
			{
				if ((this._Reserve5 != value))
				{
					this.OnReserve5Changing(value);
					this.SendPropertyChanging();
					this._Reserve5 = value;
					this.SendPropertyChanged("Reserve5");
					this.OnReserve5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LaunchedFrom", DbType="NVarChar(1000)")]
		public string LaunchedFrom
		{
			get
			{
				return this._LaunchedFrom;
			}
			set
			{
				if ((this._LaunchedFrom != value))
				{
					this.OnLaunchedFromChanging(value);
					this.SendPropertyChanging();
					this._LaunchedFrom = value;
					this.SendPropertyChanged("LaunchedFrom");
					this.OnLaunchedFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WindowHierarchy", DbType="NVarChar(1000)")]
		public string WindowHierarchy
		{
			get
			{
				return this._WindowHierarchy;
			}
			set
			{
				if ((this._WindowHierarchy != value))
				{
					this.OnWindowHierarchyChanging(value);
					this.SendPropertyChanging();
					this._WindowHierarchy = value;
					this.SendPropertyChanged("WindowHierarchy");
					this.OnWindowHierarchyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UIContent_AssemblyLink", Storage="_AssemblyLinks", ThisKey="ContentID", OtherKey="ContentID")]
		public EntitySet<AssemblyLink> AssemblyLinks
		{
			get
			{
				return this._AssemblyLinks;
			}
			set
			{
				this._AssemblyLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UIContent_BugLink", Storage="_BugLinks", ThisKey="ContentID", OtherKey="ContentID")]
		public EntitySet<BugLink> BugLinks
		{
			get
			{
				return this._BugLinks;
			}
			set
			{
				this._BugLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UIContent_Result", Storage="_Results", ThisKey="ContentID", OtherKey="ContentID")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UIContent_RuleStatus", Storage="_RuleStatus", ThisKey="ContentID", OtherKey="ContentID")]
		public EntitySet<RuleStatus> RuleStatus
		{
			get
			{
				return this._RuleStatus;
			}
			set
			{
				this._RuleStatus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BuildInfo_UIContent", Storage="_BuildInfo", ThisKey="BuildID", OtherKey="BuildID", IsForeignKey=true)]
		public BuildInfo BuildInfo
		{
			get
			{
				return this._BuildInfo.Entity;
			}
			set
			{
				BuildInfo previousValue = this._BuildInfo.Entity;
				if (((previousValue != value) 
							|| (this._BuildInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BuildInfo.Entity = null;
						previousValue.UIContents.Remove(this);
					}
					this._BuildInfo.Entity = value;
					if ((value != null))
					{
						value.UIContents.Add(this);
						this._BuildID = value.BuildID;
					}
					else
					{
						this._BuildID = default(int);
					}
					this.SendPropertyChanged("BuildInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_UIContent", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.UIContents.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.UIContents.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UITrace_UIContent", Storage="_UITrace", ThisKey="TraceID", OtherKey="TraceID", IsForeignKey=true)]
		public UITrace UITrace
		{
			get
			{
				return this._UITrace.Entity;
			}
			set
			{
				UITrace previousValue = this._UITrace.Entity;
				if (((previousValue != value) 
							|| (this._UITrace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UITrace.Entity = null;
						previousValue.UIContents.Remove(this);
					}
					this._UITrace.Entity = value;
					if ((value != null))
					{
						value.UIContents.Add(this);
						this._TraceID = value.TraceID;
					}
					else
					{
						this._TraceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UITrace");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssemblyLinks(AssemblyLink entity)
		{
			this.SendPropertyChanging();
			entity.UIContent = this;
		}
		
		private void detach_AssemblyLinks(AssemblyLink entity)
		{
			this.SendPropertyChanging();
			entity.UIContent = null;
		}
		
		private void attach_BugLinks(BugLink entity)
		{
			this.SendPropertyChanging();
			entity.UIContent = this;
		}
		
		private void detach_BugLinks(BugLink entity)
		{
			this.SendPropertyChanging();
			entity.UIContent = null;
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.UIContent = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.UIContent = null;
		}
		
		private void attach_RuleStatus(RuleStatus entity)
		{
			this.SendPropertyChanging();
			entity.UIContent = this;
		}
		
		private void detach_RuleStatus(RuleStatus entity)
		{
			this.SendPropertyChanging();
			entity.UIContent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResultsSummary")]
	public partial class ResultsSummary
	{
		
		private int _ContentID;
		
		private int _BuildID;
		
		private string _BuildNo;
		
		private string _Language;
		
		private int _ResultID;
		
		private string _ResultType;
		
		private int _RuleID;
		
		private int _Expr1;
		
		private string _RuleName;
		
		private bool _IsEnabled;
		
		private int _Expr2;
		
		private int _ClientID;
		
		private int _Expr3;
		
		private string _OSType;
		
		public ResultsSummary()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentID", DbType="Int NOT NULL")]
		public int ContentID
		{
			get
			{
				return this._ContentID;
			}
			set
			{
				if ((this._ContentID != value))
				{
					this._ContentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildID", DbType="Int NOT NULL")]
		public int BuildID
		{
			get
			{
				return this._BuildID;
			}
			set
			{
				if ((this._BuildID != value))
				{
					this._BuildID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildNo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BuildNo
		{
			get
			{
				return this._BuildNo;
			}
			set
			{
				if ((this._BuildNo != value))
				{
					this._BuildNo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(50)")]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this._Language = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultID", DbType="Int NOT NULL")]
		public int ResultID
		{
			get
			{
				return this._ResultID;
			}
			set
			{
				if ((this._ResultID != value))
				{
					this._ResultID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultType", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ResultType
		{
			get
			{
				return this._ResultType;
			}
			set
			{
				if ((this._ResultType != value))
				{
					this._ResultType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleID", DbType="Int NOT NULL")]
		public int RuleID
		{
			get
			{
				return this._RuleID;
			}
			set
			{
				if ((this._RuleID != value))
				{
					this._RuleID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr1", DbType="Int NOT NULL")]
		public int Expr1
		{
			get
			{
				return this._Expr1;
			}
			set
			{
				if ((this._Expr1 != value))
				{
					this._Expr1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RuleName
		{
			get
			{
				return this._RuleName;
			}
			set
			{
				if ((this._RuleName != value))
				{
					this._RuleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabled", DbType="Bit NOT NULL")]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this._IsEnabled = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr2", DbType="Int NOT NULL")]
		public int Expr2
		{
			get
			{
				return this._Expr2;
			}
			set
			{
				if ((this._Expr2 != value))
				{
					this._Expr2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this._ClientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr3", DbType="Int NOT NULL")]
		public int Expr3
		{
			get
			{
				return this._Expr3;
			}
			set
			{
				if ((this._Expr3 != value))
				{
					this._Expr3 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSType", DbType="VarChar(30)")]
		public string OSType
		{
			get
			{
				return this._OSType;
			}
			set
			{
				if ((this._OSType != value))
				{
					this._OSType = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViewTypeBuild")]
	public partial class ViewTypeBuild
	{
		
		private int _TypeID;
		
		private int _ContentID;
		
		private int _Expr1;
		
		private int _BuildID;
		
		private int _Expr2;
		
		private string _BuildNo;
		
		private string _UIName;
		
		private string _Language;
		
		public ViewTypeBuild()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentID", DbType="Int NOT NULL")]
		public int ContentID
		{
			get
			{
				return this._ContentID;
			}
			set
			{
				if ((this._ContentID != value))
				{
					this._ContentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr1", DbType="Int NOT NULL")]
		public int Expr1
		{
			get
			{
				return this._Expr1;
			}
			set
			{
				if ((this._Expr1 != value))
				{
					this._Expr1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildID", DbType="Int NOT NULL")]
		public int BuildID
		{
			get
			{
				return this._BuildID;
			}
			set
			{
				if ((this._BuildID != value))
				{
					this._BuildID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr2", DbType="Int NOT NULL")]
		public int Expr2
		{
			get
			{
				return this._Expr2;
			}
			set
			{
				if ((this._Expr2 != value))
				{
					this._Expr2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildNo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BuildNo
		{
			get
			{
				return this._BuildNo;
			}
			set
			{
				if ((this._BuildNo != value))
				{
					this._BuildNo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UIName", DbType="NVarChar(200)")]
		public string UIName
		{
			get
			{
				return this._UIName;
			}
			set
			{
				if ((this._UIName != value))
				{
					this._UIName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(50)")]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this._Language = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViewAssemblySummary")]
	public partial class ViewAssemblySummary
	{
		
		private int _TypeID;
		
		private string _AssemblyName;
		
		private string _FullTypeName;
		
		private int _ContentID;
		
		private int _BuildID;
		
		private int _Expr2;
		
		private string _BuildNo;
		
		private string _Language;
		
		private int _AssemblyLinkID;
		
		private int _Expr3;
		
		private int _Expr4;
		
		private bool _IsPageIdentifier;
		
		private string _UIName;
		
		private int _ClientID;
		
		private int _Expr5;
		
		private string _OSType;
		
		private string _UserName;
		
		public ViewAssemblySummary()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyName", DbType="VarChar(400) NOT NULL", CanBeNull=false)]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this._AssemblyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullTypeName", DbType="VarChar(400) NOT NULL", CanBeNull=false)]
		public string FullTypeName
		{
			get
			{
				return this._FullTypeName;
			}
			set
			{
				if ((this._FullTypeName != value))
				{
					this._FullTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentID", DbType="Int NOT NULL")]
		public int ContentID
		{
			get
			{
				return this._ContentID;
			}
			set
			{
				if ((this._ContentID != value))
				{
					this._ContentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildID", DbType="Int NOT NULL")]
		public int BuildID
		{
			get
			{
				return this._BuildID;
			}
			set
			{
				if ((this._BuildID != value))
				{
					this._BuildID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr2", DbType="Int NOT NULL")]
		public int Expr2
		{
			get
			{
				return this._Expr2;
			}
			set
			{
				if ((this._Expr2 != value))
				{
					this._Expr2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildNo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BuildNo
		{
			get
			{
				return this._BuildNo;
			}
			set
			{
				if ((this._BuildNo != value))
				{
					this._BuildNo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(50)")]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this._Language = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyLinkID", DbType="Int NOT NULL")]
		public int AssemblyLinkID
		{
			get
			{
				return this._AssemblyLinkID;
			}
			set
			{
				if ((this._AssemblyLinkID != value))
				{
					this._AssemblyLinkID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr3", DbType="Int NOT NULL")]
		public int Expr3
		{
			get
			{
				return this._Expr3;
			}
			set
			{
				if ((this._Expr3 != value))
				{
					this._Expr3 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr4", DbType="Int NOT NULL")]
		public int Expr4
		{
			get
			{
				return this._Expr4;
			}
			set
			{
				if ((this._Expr4 != value))
				{
					this._Expr4 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPageIdentifier", DbType="Bit NOT NULL")]
		public bool IsPageIdentifier
		{
			get
			{
				return this._IsPageIdentifier;
			}
			set
			{
				if ((this._IsPageIdentifier != value))
				{
					this._IsPageIdentifier = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UIName", DbType="NVarChar(200)")]
		public string UIName
		{
			get
			{
				return this._UIName;
			}
			set
			{
				if ((this._UIName != value))
				{
					this._UIName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this._ClientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr5", DbType="Int NOT NULL")]
		public int Expr5
		{
			get
			{
				return this._Expr5;
			}
			set
			{
				if ((this._Expr5 != value))
				{
					this._Expr5 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSType", DbType="VarChar(30)")]
		public string OSType
		{
			get
			{
				return this._OSType;
			}
			set
			{
				if ((this._OSType != value))
				{
					this._OSType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViewRescan")]
	public partial class ViewRescan
	{
		
		private int _ContentID;
		
		private int _ClientID;
		
		private int _BuildID;
		
		private string _UIName;
		
		private string _UserName;
		
		private string _OSType;
		
		private string _BuildNo;
		
		private string _Language;
		
		private string _OSLanguage;
		
		public ViewRescan()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentID", DbType="Int NOT NULL")]
		public int ContentID
		{
			get
			{
				return this._ContentID;
			}
			set
			{
				if ((this._ContentID != value))
				{
					this._ContentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this._ClientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildID", DbType="Int NOT NULL")]
		public int BuildID
		{
			get
			{
				return this._BuildID;
			}
			set
			{
				if ((this._BuildID != value))
				{
					this._BuildID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UIName", DbType="NVarChar(200)")]
		public string UIName
		{
			get
			{
				return this._UIName;
			}
			set
			{
				if ((this._UIName != value))
				{
					this._UIName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSType", DbType="VarChar(30)")]
		public string OSType
		{
			get
			{
				return this._OSType;
			}
			set
			{
				if ((this._OSType != value))
				{
					this._OSType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildNo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BuildNo
		{
			get
			{
				return this._BuildNo;
			}
			set
			{
				if ((this._BuildNo != value))
				{
					this._BuildNo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(50)")]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this._Language = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSLanguage", DbType="NVarChar(100)")]
		public string OSLanguage
		{
			get
			{
				return this._OSLanguage;
			}
			set
			{
				if ((this._OSLanguage != value))
				{
					this._OSLanguage = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViewENUBitmap")]
	public partial class ViewENUBitmap
	{
		
		private int _ContentID;
		
		private System.Data.Linq.Binary _UIScreenShot;
		
		private int _AssemblyLinkID;
		
		private int _Expr1;
		
		private int _TypeID;
		
		private int _Expr2;
		
		private string _AssemblyName;
		
		private string _FullTypeName;
		
		private int _BuildID;
		
		private int _Expr3;
		
		private string _Language;
		
		public ViewENUBitmap()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentID", DbType="Int NOT NULL")]
		public int ContentID
		{
			get
			{
				return this._ContentID;
			}
			set
			{
				if ((this._ContentID != value))
				{
					this._ContentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UIScreenShot", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary UIScreenShot
		{
			get
			{
				return this._UIScreenShot;
			}
			set
			{
				if ((this._UIScreenShot != value))
				{
					this._UIScreenShot = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyLinkID", DbType="Int NOT NULL")]
		public int AssemblyLinkID
		{
			get
			{
				return this._AssemblyLinkID;
			}
			set
			{
				if ((this._AssemblyLinkID != value))
				{
					this._AssemblyLinkID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr1", DbType="Int NOT NULL")]
		public int Expr1
		{
			get
			{
				return this._Expr1;
			}
			set
			{
				if ((this._Expr1 != value))
				{
					this._Expr1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr2", DbType="Int NOT NULL")]
		public int Expr2
		{
			get
			{
				return this._Expr2;
			}
			set
			{
				if ((this._Expr2 != value))
				{
					this._Expr2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyName", DbType="VarChar(400) NOT NULL", CanBeNull=false)]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this._AssemblyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullTypeName", DbType="VarChar(400) NOT NULL", CanBeNull=false)]
		public string FullTypeName
		{
			get
			{
				return this._FullTypeName;
			}
			set
			{
				if ((this._FullTypeName != value))
				{
					this._FullTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildID", DbType="Int NOT NULL")]
		public int BuildID
		{
			get
			{
				return this._BuildID;
			}
			set
			{
				if ((this._BuildID != value))
				{
					this._BuildID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr3", DbType="Int NOT NULL")]
		public int Expr3
		{
			get
			{
				return this._Expr3;
			}
			set
			{
				if ((this._Expr3 != value))
				{
					this._Expr3 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(50)")]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this._Language = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
